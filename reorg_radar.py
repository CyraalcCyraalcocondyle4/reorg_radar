#!/usr/bin/env python3
"""
ReorgRadar ‚Äî –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–ø–Ω—ã—Ö —Ä–µ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π (reorg) –Ω–∞ Ethereum.
–ü—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ reorg –ª–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ –¥–µ—Ç–∞–ª–∏.
"""

import os
import time
import logging
from web3 import Web3

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
RPC_URL       = os.getenv("ETH_RPC_URL", "https://mainnet.infura.io/v3/YOUR_KEY")
POLL_INTERVAL = int(os.getenv("POLL_INTERVAL", "5"))  # —Å–µ–∫—É–Ω–¥—ã

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=os.getenv("LOG_FILE", "reorg_radar.log"),
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)
console = logging.StreamHandler()
console.setFormatter(logging.Formatter("%(asctime)s [%(levelname)s] %(message)s", "%H:%M:%S"))
logging.getLogger().addHandler(console)

def main():
    w3 = Web3(Web3.HTTPProvider(RPC_URL))
    if not w3.is_connected():
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ RPC‚Äë—É–∑–ª—É: %s", RPC_URL)
        return

    logging.info("üîç ReorgRadar –∑–∞–ø—É—â–µ–Ω, –æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–µ %s —Å–µ–∫.", POLL_INTERVAL)
    last_block = w3.eth.block_number
    last_hash  = w3.eth.get_block(last_block).hash.hex()
    logging.info("–°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–ª–æ–∫: #%d (%s)", last_block, last_hash)

    while True:
        try:
            current = w3.eth.block_number
            # –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –±–ª–æ–∫–∏
            if current > last_block:
                for bn in range(last_block + 1, current + 1):
                    blk = w3.eth.get_block(bn)
                    # –ø—Ä–æ–≤–µ—Ä—è–µ–º parentHash
                    if blk.parentHash.hex() != last_hash:
                        logging.warning(
                            "‚ö†Ô∏è Reorg! –ë–ª–æ–∫ #%d –∏–º–µ–µ—Ç parentHash %s, –æ–∂–∏–¥–∞–µ–º—ã–π %s",
                            bn, blk.parentHash.hex(), last_hash
                        )
                    else:
                        logging.info("–ë–ª–æ–∫ #%d –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω (hash=%s)", bn, blk.hash.hex())
                    # –æ–±–Ω–æ–≤–ª—è–µ–º last
                    last_hash  = blk.hash.hex()
                    last_block = bn
            time.sleep(POLL_INTERVAL)
        except KeyboardInterrupt:
            logging.info("–í—ã—Ö–æ–¥ –ø–æ Ctrl-C")
            break
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞: %s", e)
            time.sleep(POLL_INTERVAL)

if __name__ == "__main__":
    main()
